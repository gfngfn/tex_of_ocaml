%% Premise:
%%
%% - The interpreter is implemented based on the SECD Machine.
%% - Natural numbers used as indices are represented by (possibly empty) lists of `*`
%%   (see `\secd@AccessNonZeroIndex`).
%% - Values are treated in the form `\secd@XXX … \secd@ENDVAL`.
%%   * Closures are represented by `\secd@CLOS{〈C〉}{〈E〉}\secd@ENDVAL`
%%     where `〈C〉` is the code that forms the body of the closure,
%%     and `〈E〉` is the environment that will be used for evaluating `〈C〉`.
%%   * Natural numbers are represented by `\secd@INT{…}\secd@ENDVAL` where `…` is a sequence of `o`.
%%   * Strings are represented by `\secd@STRING{…}\secd@ENDVAL` where `…` is an ordinary sequence of characters.
%% - Either a stack or an environment is a list made up simply by concatenating values.
%% - A dump is of the form `\secd@DUMP{〈C_1〉}{〈E_1〉} … \secd@DUMP{〈C_n〉}{〈E_n〉}`
%%   where each `〈C_i〉` is saved code and each `〈E_i〉` is a saved environment.

\def\secd@unique{\secd@unique@dummy}
\def\secd@Then#1\else#2\fi{\else\fi#1}
\def\secd@HopOr#1\or#2\fi{\or\fi#1}
\def\secd@Hop#1\fi{\fi#1}

\def\secd@Error#1{Error: #1}

\def\secd@Car#1#2\secd@End{#1}

%% == Instruction tags ==
\def\secd@ACCESS{\secd@HandleACCESS}
\def\secd@CLOSURE{\secd@HandleCLOSURE}
\def\secd@APPLY{\secd@HandleAPPLY}
\def\secd@RETURN{\secd@HandleRETURN}
\def\secd@CONST{\secd@HandleCONST}
\def\secd@PRIM{\secd@HandlePRIM}

%% == Value tags (which should be non-expansive) ==
\let\secd@CLOS\relax
\let\secd@ERROR\relax
\let\secd@STRING\relax
\let\secd@INT\relax

%% == Interpreter ==
\def\secd@Run#1#2#3#4{%
  %% #1 : stack
  %% #2 : environment
  %% #3 : code
  %% #4 : dump
  \ifx\secd@unique#3\secd@unique\secd@Then
    %% If code is empty, return the stack
    \secd@Finish#1\secd@End
  \else
    %% Dummy message:
    %\expandafter\message\expandafter{\expandafter\string\secd@Car#3\secd@End}%
    %% Handle the instruction (by using `\secd@HandleXXXX`)
    #3\secd@End{#1}{#2}{#4}%
  \fi
}
\def\secd@Finish#1\secd@ENDVAL#2\secd@End{%
  \ifx\secd@unique#2\secd@unique\secd@Then
    \secd@Error{not an empty stack}%
  \else\secd@Hop
    #1\secd@ENDVAL
  \fi
}
\def\secd@HandleACCESS#1#2\secd@End#3#4#5{%
  %% Handle ACCESS instruction and run the next configuration.
  %%
  %%   (S, E, (ACCESS i) :: C, D) ---> (V :: S, E, C, D)
  %%     where V is the i-th element of E (indices are zero-origin)
  %%
  %% #1 = i : index for the access
  %% #2 = C : subsequent code
  %% #3 = S : stack
  %% #4 = E : environment
  %% #5 = D : dump
  \expandafter\secd@Run\expandafter{%
  %% next stack = (V :: S)
    \romannumeral-`0\secd@AccessIndex{#1}{#4}#3%
  }{%
  %% next environment = E
    #4%
  }{%
  %% next code = C
    #2%
  }{%
  %% next dump = D
    #5%
  }%
}
\def\secd@AccessIndex#1#2{%
  %% Extract the value from the environment.
  %% This command will be used *under the complete expansion* by `\romannumeral`.
  %% #1 : index for the access
  %% #2 : environment
  \ifx\secd@unique#2\secd@unique\secd@Then
    %% If the given environment is empty, return the ERROR value.
    \secd@ERROR{unbound}\secd@ENDVAL
  \else\secd@Hop
    \secd@AccessIndexToNonEmptyEnvironment{#1}#2\secd@End
  \fi
}
\def\secd@AccessIndexToNonEmptyEnvironment#1#2\secd@ENDVAL#3\secd@End{%
  %% #1             : index for the access
  %% #2\secd@ENDVAL : the first value in the environment
  %% #3             : the rest of the environment
  \ifx\secd@unique#1\secd@unique\secd@Then
    %% If the given index is zero, return the first value in the environment.
    #2\secd@ENDVAL
  \else\secd@Hop
    %% If the given index is positive, decrement the index,
    %% remove the first element from the environment,
    %% and iteratively call the command.
    \secd@AccessNonZeroIndex#1\secd@End{#3}%
  \fi
}
\def\secd@AccessNonZeroIndex*#1\secd@End#2{%
  %% #1 : decremented index for the access
  %% #2 : tail environment
  \secd@AccessIndex{#1}{#2}%
}
\def\secd@HandleCLOSURE#1#2\secd@End#3#4#5{%
  %% Handle CLOSURE instruction and run the next configuration.
  %%
  %%   (S, E, (CLOSURE C') :: C, D) ---> ((CLOS C' E) :: S, E, C, D)
  %%
  %% #1 = C' : code contained in the closure
  %% #2 = C  : subsequent code
  %% #3 = S  : stack
  %% #4 = E  : environment
  %% #5 = D  : dump
  \secd@Run{%
  %% next stack = ((CLOS C' E) :: S)
    \secd@CLOS{#1}{#4}\secd@ENDVAL#3%
  }{%
  %% next environment = E
    #4%
  }{%
  %% next code = C
    #2%
  }{%
  %% next dump = D
    #5%
  }%
}
\def\secd@HandleAPPLY#1#2\secd@End#3#4#5{%
  %% Handle APPLY instruction and run the next configuration.
  %%
  %%   (S', E, APPLY :: C, D) ---> (S, V :: E', C', (DUMP C E) :: D)
  %%     where S' is of the form (V :: (CLOS C' E') :: S)
  %%
  %% #1      : dummy argument
  %% #2 = C  : subsequent code
  %% #3 = S' : stack
  %% #4 = E  : environment
  %% #5 = D  : dump
  \ifx\secd@unique#3\secd@unique\secd@Then
    \secd@Error{stack underflow (1)}%
  \else\secd@Hop
    \secd@HandleAPPLY@i#3\secd@End{#2}{#4}{#5}%
  \fi
}
\def\secd@HandleAPPLY@i#1\secd@ENDVAL#2\secd@End#3#4#5{%
  %% #1\secd@ENDVAL = V                   : the first element of the stack
  %% #2             = ((CLOS C' E') :: S) : the subsequent elements of the stack
  %% #3             = C                   : susequent code
  %% #4             = E                   : environment
  %% #5             = D                   : dump
  \ifx\secd@unique#2\secd@unique\secd@Then
    \secd@Error{stack underflow (2)}%
  \else\secd@Hop
    \secd@HandleAPPLY@ii#2\secd@End{#1\secd@ENDVAL}{#3}{#4}{#5}%
  \fi
}
\def\secd@HandleAPPLY@ii\secd@CLOS#1#2\secd@ENDVAL#3\secd@End#4#5#6#7{%
  %% \secd@CLOS#1#2\secd@ENDVAL = (CLOS C' E') : the second element of the stack (#1 : code, #2 : environment)
  %% #3                         = S            : the subsequent elements of the stack
  %% #4                         = V            : the first element of the stack (that includes `\secd@ENDVAL`)
  %% #5                         = C            : subsequent code
  %% #6                         = E            : environment
  %% #7                         = D            : dump
  \secd@Run{%
  %% next stack = S
    #3%
  }{%
  %% next environment = (V :: E')
    #4#2%
  }{%
  %% next code = C'
    #1%
  }{%
  %% next dump = ((DUMP C E) :: D)
    \secd@DUMP{#5}{#6}#7%
  }%
}
\def\secd@HandleRETURN#1#2\secd@End#3#4#5{%
  %% Handle RETURN instruction and run the next configuration.
  %%
  %%   (S, E, RETURN :: C, D') ---> (S, E', C', D)
  %%     where D' is of the form ((DUMP C' E') :: D)
  %%
  %% #1      : dummy argument
  %% #2 = C  : subsequent code
  %% #3 = S  : stack
  %% #4 = E  : environment
  %% #5 = D' : dump
  \ifx\secd@unique#5\secd@unique\secd@Then
    %% If the dump is empty, emit an error.
    \secd@Error{dump underflow}%
  \else\secd@Hop
    \secd@HandleRETURN@i{#2}{#3}{#4}#5\secd@End
  \fi
}
\def\secd@HandleRETURN@i#1#2#3\secd@DUMP#4#5#6\secd@End{%
  %% #1             = C            : subsequent code (that will be discarded)
  %% #2             = S            : stack (that should implicitly be non-empty)
  %% #3             = E            : environment (that will be discarded)
  %% \secd@DUMP#4#5 = (DUMP C' E') : dumped entry (#4 : code, #5 : environment)
  %% #6             = D            : subsequent element of the dump
  \secd@Run{%
  %% next stack = S
    #2%
  }{%
  %% next environment = E'
    #5%
  }{%
  %% next code = C
    #4%
  }{%
  %% next dump = D
    #6%
  }%
}
\def\secd@HandleCONST#1#2\secd@End#3#4#5{%
  %% Handle CONST instruction and run the next configuration.
  %%
  %%   (S, E, (CONST c) :: C, D) ---> (c :: S, E, C, D)
  %%
  %% #1 = c : constant value (that includes `\secd@ENDVAL`)
  %% #2 = C : subsequent code
  %% #3 = S : stack
  %% #4 = E : environment
  %% #5 = D : dump
  \secd@Run{%
  %% next stack = (c :: S)
    #1#3%
  }{%
  %% next environment = E
    #4%
  }{%
  %% next code = C
    #2%
  }{%
  %% next dump = D
    #5%
  }%
}
\def\secd@HandlePRIM#1#2\secd@End#3#4#5{%
  %% Handle PRIM instruction and run the next configuration.
  %%
  %%   (S', E, (PRIM p) :: C, D) ---> (V :: S, E, C, D)
  %%     where S' is of the form (V_n :: … :: V_1 :: S),
  %%     n is the arity of p and V is the result of p(V_1, …, V_n)
  %%
  %% #1 = p  : primitive command
  %% #2 = C  : subsequent code
  %% #3 = S' : stack
  %% #4 = E  : environment
  %% #5 = D  : dump
  \expandafter\secd@Run\expandafter{%
  %% next stack = (V :: S)
    \romannumeral-`0#1#3\secd@End
  }{%
  %% next environment = E
    #4%
  }{%
  %% next code = C
    #2%
  }{%
  %% next dump = D
    #5%
  }%
}

%% == String concatenation ==
\def\secd@PrimitiveStringConcat#1\secd@End{%
  %% #1 : stack that should have at least two elements
%  \ifx\secd@unique#1\secd@unique
%    \secd@ERROR{stack underflow (string concat 1)}%
%  \else
    \secd@PrimitiveStringConcat@i#1\secd@End
%  \fi
}
\def\secd@PrimitiveStringConcat@i\secd@STRING#1\secd@ENDVAL#2\secd@End{%
  %% \secd@STRING#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% #2                         : the rest of the stack
%  \ifx\secd@unique#2\secd@unique
%    \secd@ERROR{stack underflow (string concat 2)}%
%  \else
    \secd@PrimitiveStringConcat@ii{#1}#2\secd@End
%  \fi
}
\def\secd@PrimitiveStringConcat@ii#1\secd@STRING#2\secd@ENDVAL#3\secd@End{%
  %% \secd@STRING#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% \secd@STRING#2\secd@ENDVAL : the second element of the stack (i.e. the first argument)
  %% #3                         : the rest of the stack
  \secd@STRING{#2#1}\secd@ENDVAL#3%
}

%% == String display ==
\def\secd@EvalAndShowString#1{%
  \expandafter\secd@ShowString\romannumeral-`0#1%
}
\def\secd@ShowString\secd@STRING#1\secd@ENDVAL{#1}

%% == Integer addition ==
\def\secd@PrimitiveIntAdd#1\secd@End{%
  %% #1 : stack that should have at least two elements
  \secd@PrimitiveIntAdd@i#1\secd@End
}
\def\secd@PrimitiveIntAdd@i\secd@INT#1\secd@ENDVAL#2\secd@End{%
  %% \secd@INT#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% #2                      : the rest of the stack
  \secd@PrimitiveIntAdd@ii{#1}#2\secd@End
}
\def\secd@PrimitiveIntAdd@ii#1\secd@INT#2\secd@ENDVAL#3\secd@End{%
  %% \secd@INT#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% \secd@INT#2\secd@ENDVAL : the second element of the stack (i.e. the first argument)
  \secd@INT{#1#2}\secd@ENDVAL#3%
}

%% == Integer subtraction ==
\def\secd@PrimitiveIntSub#1\secd@End{%
  %% #1 : stack that should have at least two elements
  \secd@PrimitiveIntSub@i#1\secd@End
}
\def\secd@PrimitiveIntSub@i\secd@INT#1\secd@ENDVAL#2\secd@End{%
  %% \secd@INT#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% #2                      : the rest of the stack
  \secd@PrimitiveIntSub@ii{#1}#2\secd@End
}
\def\secd@PrimitiveIntSub@ii#1\secd@INT#2\secd@ENDVAL#3\secd@End{%
  %% \secd@INT#1\secd@ENDVAL : the first element of the stack (i.e. the second argument)
  %% \secd@INT#2\secd@ENDVAL : the second element of the stack (i.e. the first argument)
  \secd@PrimitiveIntSub@Iter{#2}{#1}#3%
}
\def\secd@PrimitiveIntSub@Iter#1#2{%
  %% #1 : the subtracted number
  %% #2 : the number to subtract
  \ifx\secd@unique#1\secd@unique\secd@Then
    \secd@INT{}\secd@ENDVAL
  \else\secd@Hop
    \secd@PrimitiveIntSub@Iter@i#1\secd@End{#2}%
  \fi
}
\def\secd@PrimitiveIntSub@Iter@i o#1\secd@End#2{%
  %% #1 : (the subtracted number) - 1
  %% #2 : the number to subtract
  \ifx\secd@unique#2\secd@unique\secd@Then
    \secd@INT{o#1}\secd@ENDVAL
  \else\secd@Hop
    \secd@PrimitiveIntSub@Iter@ii{#1}#2\secd@End
  \fi
}
\def\secd@PrimitiveIntSub@Iter@ii#1o#2\secd@End{%
  %% #1 : (the subtracted number) - 1
  %% #2 : (the number to subtract) - 1
  \secd@PrimitiveIntSub@Iter{#1}{#2}%
}

%% == Integer display ==
\def\secd@EvalAndShowInt#1{%
  \expandafter\secd@ShowInt\romannumeral-`0#1%
}
\def\secd@ShowInt\secd@INT#1\secd@ENDVAL{%
  %% #1 : a natural number represented by a sequence of `o`
  \secd@ShowInt@Iter{}{}{0}{#1}%
}
\def\secd@ShowInt@Iter#1#2#3#4{%
  %% #1 : an accumulator of resulting digits
  %% #2 : an accumulator for the next (10^n)s
  %% #3 : a counter represented by a digit
  %% #4 : a natural number represented by a sequence of `o`
  \ifx\secd@unique#4\secd@unique\secd@Then
    %% If reached the end, shift to the next (10^n)s place or finish.
    \secd@ShowInt@ShiftOrEnd{#1}{#2}{#3}%
  \else\secd@Hop
    %% Otherwise, increment the counter.
    \secd@ShowInt@IncrementDigit{#1}{#2}{#3}#4\secd@End
  \fi
}
\def\secd@ShowInt@ShiftOrEnd#1#2#3{%
  %% #1 : an accumulator for digits
  %% #2 : an accumulator for the next 10s
  %% #3 : a counter represented by a digit
  \ifx\secd@unique#2\secd@unique\secd@Then
    %% If the next (10^n)s place is not needed, return the result.
    #3#1%
  \else\secd@Hop
    %% Otherwise, shift the (10^n)s place.
    \secd@ShowInt@Iter{#3#1}{}{0}{#2}%
  \fi
}
\def\secd@ShowInt@IncrementDigit#1#2#3o#4\secd@End{%
  %% #1 : an accumulator of resulting digits
  %% #2 : an accumulator for the next (10^n)s
  %% #3 : a counter represented by a digit
  %% #4 : a decremented natural number represented by a sequence of `o`
  \ifcase#3 \secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{1}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{2}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{3}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{4}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{5}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{6}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{7}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{8}{#4}%
  \or\secd@HopOr
    \secd@ShowInt@Iter{#1}{#2}{9}{#4}%
  \or\secd@Hop
    %% If the current counter is 9, set the carry digit.
    \secd@ShowInt@Iter{#1}{o#2}{0}{#4}%
  \fi
}
